import uuid
import requests
import yaml
import re
import string
import json

from yaml.loader import SafeLoader

with open("config.yaml", "r") as ymlfile:
    vari = yaml.load(ymlfile, Loader=SafeLoader)


def check_type(iocs):
    if (bool(re.match(r"^#", iocs))) or (bool(re.match(r"^$", iocs))):
        return "none"
    if (bool(re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", iocs))):
        return "ip"
    elif (bool(re.match(r".*\..*", iocs))):
        return "domain"



def check_rule_exsists(rule_id):
    headers = {'content-type': 'application/json', 'kbn-xsrf': 'true', 'Accept-Charset': 'UTF-8'}
    response = requests.get(f"{vari['network']['elastic_check_api']}{rule_id}", auth=(f"{vari['elastic_authen']['user']}", f"{vari['elastic_authen']['password']}"), headers=headers)
    if response.status_code == 200:
        return check_rule_exsists(str(uuid.uuid4()))
    else:
        return rule_id


def elk_api_call(file):
    with open(file) as f:
        lines = f.readlines()
    headers = {'content-type': 'application/json', 'kbn-xsrf': 'true', 'Accept-Charset': 'UTF-8'}
    for i in range(len(lines)):
        lines[i] = str.strip(lines[i])
        response = requests.post(f"{vari['network']['elastic_dection_api']}", auth=(f"{vari['elastic_authen']['user']}", f"{vari['elastic_authen']['password']}"), data=lines[i], headers=headers)
        if response.status_code != 200:
            print(response.content)
        #     print("Rule exsists")


def domain_query_gen(file):
    with open(file) as f:
        lines = f.readlines()
    rule_query = "dns.question.name: ( "
    for i in range(len(lines)):
        lines[i] = str.strip(lines[i])
        if check_type(lines[i]) == "domain":
            rule_query += lines[i] + " or "
    rule_query = rule_query[:-3]
    rule_query += ")"
    if bool(re.match("^dns\.question\.name:\)$", rule_query)):
        return False
    else:
        return rule_query


def ip_query_gen(file):
    with open(file) as f:
        lines = f.readlines()
    rule_query = "flow.src_addr: ( "
    for i in range(len(lines)):
        lines[i] = str.strip(lines[i])
        if check_type(lines[i]) == "ip":
            rule_query += lines[i] + " or "
    rule_query = rule_query[:-3]
    rule_query += ")"
    if bool(re.match("^flow\.src_addr:\)$", rule_query)):
        return False
    else:
        return rule_query


def rule_gen(file, outfile):
    output_file = open(outfile, "w")
    with open(fr"{vari['file']['list_iocs_folder']}\{file}") as f:
        lines = f.readlines()
    for i in range(len(lines)):
        lines[i] = str.strip(lines[i])
    res_ip = ip_query_gen(fr"{vari['file']['list_iocs_folder']}\{file}")
    res_domain = domain_query_gen(fr"{vari['file']['list_iocs_folder']}\{file}")
    if bool(res_ip):
        rule_template = '{"rule_id": "${rule_id}", "risk_score": ${risk_score}, "description": "Auto generated by tools", "index":["elastiflow-*"], "interval": "5m", "name": "${name}", "severity": "high",  "tags": [ "ip", "malware", "auto-gen" ],  "type": "query",  "from": "now-5m",   "query": "${query}",  "language": "kuery",  "filters": [],  "enabled": false}'
        t = string.Template(rule_template)
        result_ip_rule = t.safe_substitute(rule_id=f"{check_rule_exsists(str(uuid.uuid4()))}", name=f"Create from file {file}", query=f"{res_ip}", risk_score=85)
        print(result_ip_rule, file=output_file)
    if bool(res_domain):
        rule_template = '{"rule_id": "${rule_id}", "risk_score": ${risk_score}, "description": "Auto generated by tools", "index":["dns-*"], "interval": "5m", "name": "${name}", "severity": "high",  "tags": [ "domain", "malware", "auto-gen" ],  "type": "query",  "from": "now-5m",   "query": "${query}",  "language": "kuery",  "filters": [],  "enabled": false}'
        t = string.Template(rule_template)
        result_domain_rule = t.safe_substitute(rule_id=f"{check_rule_exsists(str(uuid.uuid4()))}", name=f"Create from file {file}", query=f"{res_domain}", risk_score=85)
        print(result_domain_rule, file=output_file)
